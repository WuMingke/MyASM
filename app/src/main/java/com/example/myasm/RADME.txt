每一个build.gradle文件都对应一个Project对象
根项目就是root project
其它模块就是 sub project

生命周期
初始阶段：
    在初始阶段，会查找settings.gradle文件并根据其中的配置决定让哪些项目参与构建，并为每一个项目创建一个Project对象
    具体按照时间顺序有
        执行init.gradle
        查找settings.gradle
        编译buildSrc目录
        解析gradle.properties内容
        编译并执行settings.gradle
        创建project和subproject
配置阶段：
    会配置Project对象，就是执行各个模块下的build.gradle脚本，构造任务的依赖关系，生成了有向无环图，并【执行任务中的配置代码】
执行阶段：
    按照顺序执行任务中定义的动作

针对不同的阶段，有不同的生命周期回调。用一张图把Gradle生命周期的不同阶段对应的回调方法串联起来：
初始阶段
    Gradle.buildStarted
        执行settings.gradle
    Gradle.settingsEvaluated    (settings.gradle脚本执行完毕)
    Gradle.projectsLoaded       (项目初始化完毕)
配置阶段
    Gradle.beforeProject/Project.beforeEvaluate
        执行build.gradle
    Gradle.afterProject/Project.afterEvaluate
    Gradle.projectsEvaluated     (所有项目的build.gradle执行完毕)
    Gradle.taskGraph.whenReady   (Task依赖关系图建立完毕)
执行阶段
    Gradle.taskGraph.beforeTask
        执行任务
    Gradle.taskGraph.afterTask
    Gradle.buildFinished

在build.gradle文件中调用的方法相当于调用Project类中的方法

获取属性的几种常见方法：
1 Project 的 ext{} 语句
2 插件扩展的extension
3 定义在gradle.properties中

Gradle提供了3种创建插件的方式
1 直接在构建脚本（build.gradle）中定义插件，称为脚本插件
2 创建一个buildSrc模块（module），并在其中定义插件，称为buildSrc插件
3 在单独项目中定义插件，称为单独项目插件
demo
    1:MyScriptPlugin
    2:MyBuildSrcPlugin
    3:myPlugin

扩展：MyExtensionTestPlugin
扩展嵌套：其实就是调用内部的方法

NamedDomainObjectContainer 命名领域对象容器，通过DSL创建指定类型的对象实例，例如 debug、release 两个

调试插件
1 创建Remote debug
2 执行命令
./gradlew <任务名> -Dorg.gradle.daemon=false -Dorg.gradle.debug=true


Transform

APK组成：
classes.dex 代码编译后最终生成的文件
res 资源文件，图片、布局等
resources.arsc  资源文件对应的索引，通过此文件可以定位资源
META_INF  保存应用的签名和校验信息，用于保证程序的完整性。当生成apk的时候，会对目录中所有的内容做一次校验，
            并将结果保存在这个目录中。手机在安装apk的时候，会再做一次校验并将结果与保存的做比较，避免apk被篡改
assets  原生资源文件，
AndroidManifest.xml 清单配置文件

应用构建流程：
1 使用aapt 打包资源文件，生成R.java文件
2 使用aidl 处理.aidl文件，生成对应的.java文件
3 使用javac 编译.java文件，生成.class文件
4 使用dx(d8??) 处理.class文件，生成classes.dex文件
5 使用apkbuilder 将所有资源和.dex文件打包成apk
6 签名
7 使用zipalign 对apk进行对齐处理，减少运行时内存占用

Transform：(demo->MyTransform)
    Transform就像.class文件的过滤器，内部有一个TransformManager对这些Transform进行统一管理。
    在整个编译的过程中，.class文件会流入一个Transform，当前Transform加工处理完之后再输出，这个输入作为
    下一个Transform的输入，直到所有的Transform都处理完成。
API：
getName()   定义名字
    每一个Transform都会被转换成Gradle Task，对应TransformTask这个类，执行的时候，
    会执行任务  > Task :app:transformClassesWithChapter2_01ForDebug ，就是这个名字。
    它也是Transform的输出目录的文件夹名。
getInputTypes()    指定Transform要处理的输入内容的类型
    通常设置成CLASSES
getScopes()    指定Transform处理的范围
getSecondaryFiles()    将额外的文件作为输入内容添加到Transform中
transform(TransformInvocation transformInvocation）  核心逻辑

TransformInvocation


如果不重写transform方法会不会有问题？
Transform是串行运行的，每一个Transform会接收上一个Transform的输出资源作为它的输入资源，如果不重写transform方法，
就不能将上一个的输出传递到下一个Transform，所以打包的时候就没有代码。

为什么输出的JAR包都是以数字命名的？
遍历文件，命名的时候，是用一个数值累加来命名的，真实的名字，可以查看生成的 _content_.json 文件

模版：TransformTemplate

并发编译：parallelStream api

Transform原理：


AGP 7.0 Transform标记废弃
AGP 8.0 Transform移除

字节码基础
在class内部使用<init>来表示构造方法的方法名，使用<cinit>来表示静态初始化代码块的方法名

attribute_info：

不同类型的变量的初始化顺序是不一样的。
对于非static变量，初始赋值是在实例构造方法中（<init>中）
对于static变量，是在类构造器中赋值，（静态代码块中）
对于final static，常量，值是用ConstantValue记录的。

在JVM中，一个类从被加载到虚拟机内存中开始，到卸载出内存为止，它的生命周期有7个阶段：
加载、验证、准备、解析、初始化、使用、卸载
在验证阶段，会对class文件的格式（魔数是不是cafebabe）、元数据（是否继承了final类）、字节码、符号引用等数据进行验证，
防止虚拟机加载了有害的数据。
在准备阶段，会给类变量赋零值，如果是常量，那么就已经赋对应的值了，保存在ConstantValue中
static方法、变量赋值、构造方法执行顺序？？


Java虚拟机栈：
每个线程都对应一个Java虚拟机栈，与线程一同创建。每个Java虚拟机栈可能存在多个栈帧，
每进入一个方法会创建一个栈帧，退出方法后销毁栈帧。

栈帧：
用来支持虚拟机进行方法调用和方法执行的数据结构。
栈帧由局部变量表、操作数栈、指向当前方法所在类的运行时常量池的引用 组成。
局部变量表和操作数栈的大小在编译时确定，保存在Code属性中并提供给栈帧使用。

StackOverflowError:
线程在某一时刻只能执行一个方法，只有这个方法对应的栈帧是活动的，这个方法称为当前方法，对应的栈帧称为当前栈帧；
如果当前方法未运行结束时又调用了其它方法，那么新的栈帧就会被创建，当累计的栈帧大小超过了设置的阈值就会抛出异常。

局部变量表：
JVM用局部变量表来完成方法调用时的参数传递。当调用方法时，方法中的参数将会依次存储在局部变量表中。
也就是说进入方法的时候局部变量表中的值对应着方法中的参数，第0个位置的参数由方法修饰符决定：
如果是实例方法，那么第0个位置的局部变量是存储这个实例方法所在的对象的引用，即this
如果是类方法，（static修饰的方法），那么第0个位置的局部变量就是方法的第一个参数


操作数栈：
作用是保存计算过程中的中间结果，同时作为计算过程中变量临时的存储空间。
当一个方法刚执行时，操作数栈是空的，随着方法的执行和字节码指令的执行，对象实例的字段会从局部变量表中
复制常量、变量压入操作数栈，在随着计算的进行将栈中元素出栈到局部变量表，或者消费栈中的元素返回给方法
的调用者，也就是出栈、入栈操作。

字节码指令new
new指令后面直接跟dup、invokespecial两个指令。
dup的作用是复制操作数栈栈顶的值并压入栈顶。
invokespecial在此处的作用是调用实例的构造函数。
new指令是创建类的一个引用，即在内存中创建了一块区域，但内存中的内容是未初始化的，
所以需要invokespecial调用构造函数为它实例化。又因为invokespecial调用的构造函数没有返回值，
而invokespecial又会消耗栈顶元素，如果没有dup指令对objreference进行复制，此时栈将变成空，
即无法再对创建的对象进行操作(astore_1)，所有要用dup先对new的结果进行复制。
String str = new String();
    new
    dup
    invokespecial
    astore_1
    return

synchronized的实现：
同步指令，有两种实现：
1 对于方法级别的同步是隐式的，JVM根据方法的结构中是否有ACC_SYNCHRONIZED访问标识符来区分一个方法是否是同步的。
当调用方法时，调用指令会检查方法的ACC_SYNCHRONIZED标识符是否设置了，如果设置，执行线程会先获取同步锁，再执行方法，
最后在方法完成时，不管是不是正常完成，释放同步锁。如果一个同步方法在执行期间抛出了异常，并且在方法内部没有捕获
此异常，那么这个同步方法所持有的锁将在异常抛出时自动释放。
2 对于方法中的同步代码，由monitorenter、monitorexit两条指令来支持synchronized的实现。并且编译器为了保证在方法
异常发生完成时可以正确地释放锁，会在方法退出的地方添加monitorexit指令，也就是编译器在处理synchronized代码块的时候
会为它添加try-catch功能。

方法调用指令的区别 和 方法分派 P185
有5种方法调用指令：
invokevirtual:调用对象的实例方法
invokestatic:调用静态方法
invokespecial:调用需要特殊处理的实例方法，如构造方法、私有方法、父类方法
invokeinterface:调用接口方法
invokedynamic:

invokestatic与invokevirtual的区别在于它不需要将实例对象的引用加载到操作数栈中
所有的方法调用都只是对常量池的符号引用，并不是对应真正的物理内存中的地址。在Java中，一些方法
如何执行在编译时就可以确定下来，一些方法如何执行则需要在运行时才能确定。

为什么方法调用需要不同的指令？
    为了针对不同的使用场景，使用不同的命令，用于增加效率。
invokespecial和invokevirtual有什么区别？
invokespecial 主要用于调用确定方法版本的方法，它绕过了虚方法表，不考虑运行时多态性。
invokevirtual 支持多态性，它会根据对象的实际类型（运行时类型）来确定要调用的方法。

有哪些方法是在解析阶段确定唯一的调用版本？
静态方法、私有方法、实例构造器方法、父类方法(super关键字引用的方法)，这4类方法调用会在
类加载的时候就把符号引用解析为方法的直接引用，称为 非虚方法，还有被 final 修饰的方法，也是在
解析阶段就确定唯一的调用版本，但是它用的是invokevirtual

与之对应的是 虚方法


invokevirtual和invokeinterface有什么区别？
涉及到 方法分派，
方法分派可以分为 静态分派 和 动态分派
所有依赖静态类型来决定方法执行版本的分派动作，都称为静态分派，典型的应用就是方法重载。
    （编译时根据方法参数的静态类型来选择要执行的重载方法）
需要在运行时根据实际类型确定方法执行的版本的分派过程，称为 动态分派，比如方法重写，
    在实例对象自己内部找，找不到就不断递归去父类找，
方法分派的实现：
    有一种方式是建立一个虚方法表，使用虚方法表可以有效提高查找方法版本的速度。
虚方法表中存放着各个方法的实际入口地址，如果某个方法在子类中没有被重写，那么子类的
虚方法表中的地址和父类相同方法的地址入口是一致的，都指向父类的实现入口。如果子类
重写了父类的方法，那么子类的虚方法表中的地址就会被替换为指向子类实现版本的入口地址。
虚方法表的特点是子类的虚方法表保持了父类的虚方法表中方法的编号顺序，所以查找是高效的。

但是Java是单继承类，但是可以多实现接口，而每个接口的函数编号又都是和自己相关的，因此虚方法表
无法解决多个对应接口的函数编号问题。为解决它，就有了接口方法表，用于查找接口的实现。
所以用invokevirtual和invokeinterface来执行不同的方法调用。


try-catch-finally的实现原理：
1 finally中的代码一定会执行，字节码中会构建一些异常表来保证当前未捕获异常发生时也能够执行finally中的代码
2 字节码实现finally的方式是复制finally中的代码块，并将内容插入到try和catch代码块中所有正常退出和异常退出之前。
    如果finally中有return语句，那么结果直接是finally代码块的执行结果。

JVM的引用数据类型：
class、array、interface、null

ASM对比于Javassist：
架构设计精巧，api设计良好
体积小、速度快、性能好、而且稳定
更新及时、支持最新的Java版本

ASM：
ASM是一个底层的字节码操作库，它允许您直接操作Java字节码，包括创建、修改和分析字节码文件。
ASM提供了对字节码的精细控制，但它需要编写相对较低级的代码，因此使用起来可能相对复杂。
ASM通常用于编写字节码增强或代码生成的库，以实现诸如代理、AOP等高级功能。

Javassist：
Javassist是一个更高级别的字节码操作库，它提供了更友好的API，使您能够以更抽象的方式操作字节码。
Javassist允许您通过Java代码生成、修改和分析字节码，而无需直接处理字节码指令。
它适用于对字节码进行轻量级操作，例如动态创建类、方法注入等。

JavaPoet：
JavaPoet是用于生成Java源代码的库，而不是字节码。
JavaPoet提供了一个流畅的API，允许您以编程方式创建Java源代码文件，包括类、方法、字段等。
它通常用于生成代码，例如生成辅助类、模板代码或构建代码生成工具。
联系：

ASM和Javassist都可以用于生成或修改类的字节码，但ASM更底层，而Javassist提供更高级的抽象。
JavaPoet则专注于生成Java源代码而不是字节码，所以它与ASM和Javassist有不同的应用领域。
在某些情况下，您可以将这些工具结合使用，例如，使用Javassist生成字节码，然后使用ASM进行进一步的字节码操作，
或者使用JavaPoet生成源代码，然后编译成字节码。


ASM框架：implementation 'org.ow2.asm:asm:9.5'


